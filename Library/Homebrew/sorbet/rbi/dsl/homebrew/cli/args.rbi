# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Homebrew::CLI::Args`.
# Please instead update this file by running `bin/tapioca dsl Homebrew::CLI::Args`.

class Homebrew::CLI::Args
  sig { returns(T::Boolean) }
  def HEAD?; end

  sig { returns(T::Boolean) }
  def adopt?; end

  sig { returns(T::Boolean) }
  def aliases?; end

  sig { returns(T.nilable(String)) }
  def appdir; end

  sig { returns(T.nilable(String)) }
  def arch; end

  sig { returns(T::Boolean) }
  def archlinux?; end

  sig { returns(T.nilable(String)) }
  def audio_unit_plugindir; end

  sig { returns(T::Boolean) }
  def auto_update?; end

  sig { returns(T::Boolean) }
  def binaries?; end

  sig { returns(T.nilable(String)) }
  def bottle_tag; end

  sig { returns(T::Boolean) }
  def build_from_source?; end

  sig { returns(T::Boolean) }
  def cask?; end

  sig { returns(T::Boolean) }
  def casks?; end

  sig { returns(T::Boolean) }
  def closed?; end

  sig { returns(T.nilable(String)) }
  def colorpickerdir; end

  sig { returns(T.nilable(String)) }
  def command; end

  sig { returns(T::Boolean) }
  def compact?; end

  sig { returns(T::Boolean) }
  def custom_remote?; end

  sig { returns(T::Boolean) }
  def debian?; end

  sig { returns(T::Boolean) }
  def debug_symbols?; end

  sig { returns(T::Boolean) }
  def desc?; end

  sig { returns(T.nilable(String)) }
  def dictionarydir; end

  sig { returns(T::Boolean) }
  def display_times?; end

  sig { returns(T::Boolean) }
  def dry_run?; end

  sig { returns(T::Boolean) }
  def eval_all?; end

  sig { returns(T::Boolean) }
  def f?; end

  sig { returns(T::Boolean) }
  def fedora?; end

  sig { returns(T::Boolean) }
  def fetch_HEAD?; end

  sig { returns(T::Boolean) }
  def fink?; end

  sig { returns(T.nilable(String)) }
  def fontdir; end

  sig { returns(T::Boolean) }
  def force?; end

  sig { returns(T.nilable(String)) }
  def force_auto_update?; end

  sig { returns(T::Boolean) }
  def force_bottle?; end

  sig { returns(T::Boolean) }
  def formula?; end

  sig { returns(T::Boolean) }
  def formulae?; end

  sig { returns(T::Boolean) }
  def g?; end

  sig { returns(T::Boolean) }
  def git?; end

  sig { returns(T::Boolean) }
  def greedy?; end

  sig { returns(T::Boolean) }
  def greedy_auto_updates?; end

  sig { returns(T::Boolean) }
  def greedy_latest?; end

  sig { returns(T.nilable(T::Array[String])) }
  def hide; end

  sig { returns(T::Boolean) }
  def i?; end

  sig { returns(T::Boolean) }
  def ignore_dependencies?; end

  sig { returns(T::Boolean) }
  def ignore_pinned?; end

  sig { returns(T::Boolean) }
  def include_build?; end

  sig { returns(T::Boolean) }
  def include_optional?; end

  sig { returns(T::Boolean) }
  def include_test?; end

  sig { returns(T.nilable(String)) }
  def input_methoddir; end

  sig { returns(T::Boolean) }
  def installed?; end

  sig { returns(T::Boolean) }
  def interactive?; end

  sig { returns(T.nilable(String)) }
  def internet_plugindir; end

  sig { returns(T.nilable(String)) }
  def json; end

  sig { returns(T::Boolean) }
  def keep_tmp?; end

  sig { returns(T.nilable(String)) }
  def keyboard_layoutdir; end

  sig { returns(T.nilable(T::Array[String])) }
  def language; end

  sig { returns(T::Boolean) }
  def macports?; end

  sig { returns(T.nilable(String)) }
  def max_count; end

  sig { returns(T.nilable(String)) }
  def mdimporterdir; end

  sig { returns(T::Boolean) }
  def missing?; end

  sig { returns(T.nilable(String)) }
  def n; end

  sig { returns(T::Boolean) }
  def n?; end

  sig { returns(T::Boolean) }
  def no_simulate?; end

  sig { returns(T::Boolean) }
  def oneline?; end

  sig { returns(T::Boolean) }
  def open?; end

  sig { returns(T::Boolean) }
  def opensuse?; end

  sig { returns(T.nilable(String)) }
  def os; end

  sig { returns(T::Boolean) }
  def overwrite?; end

  sig { returns(T::Boolean) }
  def p?; end

  sig { returns(T::Boolean) }
  def patch?; end

  sig { returns(T::Boolean) }
  def plain?; end

  sig { returns(T.nilable(String)) }
  def prefpanedir; end

  sig { returns(T::Boolean) }
  def preinstall?; end

  sig { returns(T::Boolean) }
  def pull_request?; end

  sig { returns(T.nilable(String)) }
  def qlplugindir; end

  sig { returns(T::Boolean) }
  def quarantine?; end

  sig { returns(T::Boolean) }
  def recursive?; end

  sig { returns(T::Boolean) }
  def repair?; end

  sig { returns(T::Boolean) }
  def repology?; end

  sig { returns(T::Boolean) }
  def require_sha?; end

  sig { returns(T::Boolean) }
  def s?; end

  sig { returns(T.nilable(String)) }
  def screen_saverdir; end

  sig { returns(T.nilable(String)) }
  def servicedir; end

  sig { returns(T.nilable(String)) }
  def shell; end

  sig { returns(T::Boolean) }
  def skip_cask_deps?; end

  sig { returns(T::Boolean) }
  def skip_recommended?; end

  sig { returns(T::Boolean) }
  def stat?; end

  sig { returns(T::Boolean) }
  def syntax?; end

  sig { returns(T::Boolean) }
  def u?; end

  sig { returns(T::Boolean) }
  def ubuntu?; end

  sig { returns(T::Boolean) }
  def unbrewed?; end

  sig { returns(T.nilable(String)) }
  def vst3_plugindir; end

  sig { returns(T.nilable(String)) }
  def vst_plugindir; end

  sig { returns(T::Boolean) }
  def zap?; end
end
